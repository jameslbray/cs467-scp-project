services:
  db_init:
    build:
      context: .
      dockerfile: services/db_init/Dockerfile
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=5432
      - APP_USER=${APP_USER:-app_user}
      - APP_PASSWORD=${APP_PASSWORD:-app_password}
      - LOG_LEVEL=info
    depends_on:
      postgres_db:
        condition: service_healthy
      mongo_db:
        condition: service_healthy
    restart: "no"

  postgres_db:
    image: postgres:17-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c log_connections=on
      -c log_disconnections=on
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c log_destination='stderr'
      -c logging_collector=off
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongo_db:
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ADMIN_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ADMIN_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME:-chat_db}
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--eval",
          '''db.adminCommand("ping").ok''',
          "--quiet",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    volumes:
      - mongo_data:/data/db

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ADMIN_USER:-admin}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ADMIN_PASSWORD:-password}
      - ME_CONFIG_MONGODB_SERVER=mongo_db
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_ADMIN_USER:-admin}:${MONGO_ADMIN_PASSWORD:-password}@mongo_db:27017/
    depends_on:
      mongo_db:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_LOG_LEVEL=debug
      - RABBITMQ_FIREHOSE_TRACER=true
      - RABBITMQ_TRACE=1
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
      - ./services/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 3

  socket_io:
    build:
      context: .
      dockerfile: services/socket_io/Dockerfile
    ports:
      - "${SOCKET_IO_PORT}:8000"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy

  users:
    build:
      context: .
      dockerfile: services/users/Dockerfile
    ports:
      - "${USERS_PORT}:8001"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - RABBITMQ_URL=${RABBITMQ_URL}
      - POSTGRES_HOST=postgres_db
      - POSTGRES_PORT=5432
    volumes:
      - ./.env:/app/.env
    depends_on:
      postgres_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully
    tty: true
    stdin_open: true

  notifications:
    build:
      context: ./services/notifications  # Only build from notifications directory
      dockerfile: Dockerfile
    ports:
      - "${NOTIFICATIONS_PORT}:8002"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - RABBITMQ_URL=${RABBITMQ_URL}
      - MONGO_USER=${MONGO_ADMIN_USER:-admin}
      - MONGO_PASSWORD=${MONGO_ADMIN_PASSWORD:-password}
      - MONGO_HOST=${MONGO_HOST:-mongo_db}
      - MONGO_PORT=${MONGO_PORT:-27017}
      - MONGO_DB_NAME=${MONGO_DB_NAME:-notifications_db}
      - MONGO_URI=${MONGO_URI}
    depends_on:
      rabbitmq:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully
      mongo_db:
        condition: service_healthy

  presence:
    build:
      context: .
      dockerfile: services/presence/Dockerfile
    ports:
      - "${PRESENCE_PORT}:8003"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - RABBITMQ_URL=${RABBITMQ_URL}
      - POSTGRES_HOST=postgres_db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      postgres_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully

  chat:
    build:
      context: .
      dockerfile: services/chat/Dockerfile
    ports:
      - "${CHAT_PORT}:8004"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - RABBITMQ_URL=${RABBITMQ_URL}
      - MONGO_URI=mongodb://${MONGO_ADMIN_USER:-admin}:${MONGO_ADMIN_PASSWORD:-password}@${MONGO_HOST}:27017/${MONGO_DB_NAME:-chat_db}?authSource=admin
      - MONGO_PORT=27017
      - SOCKET_IO_HOST=${SOCKET_IO_HOST:-socket_io}
      - SOCKET_IO_PORT=${SOCKET_IO_PORT}
      - SOCKET_IO_PATH=${SOCKET_IO_PATH}

    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo_db:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    env_file:
      - .env
    environment:
      - VITE_API_URL=${API_URL:-http://localhost:8001}
      - VITE_SOCKET_URL=${VITE_SOCKET_URL}
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
  mongo_data:
  rabbitmq_data:
  rabbitmq_logs:
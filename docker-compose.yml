services:
  db:
    image: postgres:17-alpine               # official Postgres image
    restart: unless-stopped
    env_file:
      - .env                                 # pulls in POSTGRES_* and PGDATA
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c log_connections=on
      -c log_disconnections=on
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c log_destination='stderr'
      -c logging_collector=off
    ports:
      - "5433:5432"                          # expose for local development
    healthcheck:                            # ensures users service waits for readiness
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount all service initialization scripts
      - ./services/users/db/init:/docker-entrypoint-initdb.d/01_users  # Users service init scripts
      - ./services/presence/db/init:/docker-entrypoint-initdb.d/02_presence  # Presence service init scripts

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI port
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      # Enable debug logging
      - RABBITMQ_LOG_LEVEL=debug
      # Enable firehose (captures all messages)
      - RABBITMQ_FIREHOSE_TRACER=true
      # Enable message tracing
      - RABBITMQ_TRACE=1
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 3
  socket_io:
    build:
      context: .
      dockerfile: services/socket_io/Dockerfile
    ports:
      - "${SOCKET_IO_PORT}:8000"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      - rabbitmq
  users:
    build:
      context: .
      dockerfile: services/users/Dockerfile
    ports:
      - "${USERS_PORT}:8001"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - RABBITMQ_URL=${RABBITMQ_URL}
    volumes:
      - ./.env:/app/.env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy


  notifications:
    build:
      context: .
      dockerfile: services/notifications/Dockerfile
    ports:
      - "${NOTIFICATIONS_PORT}:8002"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      - rabbitmq

  presence:
    build:
      context: .
      dockerfile: services/presence/Dockerfile
    ports:
      - "${PRESENCE_PORT}:8003"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      - rabbitmq


  chat:
    build:
      context: .
      dockerfile: services/chat/Dockerfile
    ports:
      - "${CHAT_PORT}:8004"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      - rabbitmq

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    env_file:
      - .env
    environment:
      - VITE_API_URL=${API_URL:-http://localhost:8001}
      - VITE_SOCKET_URL=${SOCKET_URL:-http://localhost:8000}
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
  rabbitmq_data:
  rabbitmq_logs:

// AI CITATION: This file was generated by Copilot using the Claude 3.7 Sonnet Model.
// See the full conversation at https://docs.google.com/document/d/1pE9hAn18p9-VIBMroBwCv_Atp3wX49dJ2AmS-KtagJw/edit?tab=t.0#heading=h.l6jhv7ygyvdy
// Citation number: 2

import { BellIcon, BellSlashIcon } from "@heroicons/react/24/outline";
import { BellIcon as BellIconSolid } from "@heroicons/react/24/solid";
import React, { useRef, useState } from "react";
import { useClickAway } from "react-use";
import type { NotificationResponseType } from "../types/notificationType";
import { formatRelativeTime } from "../utils/dateUtils";

interface NotificationBellProps {
  notifications: NotificationResponseType[];
  onMarkAsRead: (notificationId: string) => void;
  onViewAll: () => void;
  className?: string;
}

const NotificationBell: React.FC<NotificationBellProps> = ({
  notifications,
  onMarkAsRead,
  onViewAll, 
  className = "",
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const ref = useRef<HTMLDivElement>(null);
  
  // Close dropdown when clicking outside
  useClickAway(ref, () => {
    setIsOpen(false);
  });
  
  // Count unread notifications
  const unreadCount = notifications.filter(n => !n.read).length;
  
  return (
    <div className={`relative ${className}`} ref={ref}>
      {/* Bell button */}
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none"
        aria-label="Notifications"
      >
        {notifications.length === 0 ? (
          <BellSlashIcon className="h-6 w-6" />
        ) : (
          <>
            {unreadCount > 0 ? (
              <BellIconSolid className="h-6 w-6" />
            ) : (
              <BellIcon className="h-6 w-6" />
            )}
            
            {/* Notification indicator */}
            {unreadCount > 0 && (
              <span className="absolute top-1 right-1 inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full">
                {unreadCount > 9 ? "9+" : unreadCount}
              </span>
            )}
          </>
        )}
      </button>
      
      {/* Dropdown content */}
      {isOpen && (
        <div className="absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-md shadow-lg overflow-hidden z-50 border border-gray-200 dark:border-gray-700">
          {/* Header */}
          <div className="px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
            <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100">Notifications</h3>
            {notifications.length > 0 && (
              <button
                onClick={onViewAll}
                className="text-xs text-blue-600 dark:text-blue-400 hover:underline"
              >
                View all
              </button>
            )}
          </div>
          
          {/* Notification list */}
          <div className="max-h-96 overflow-y-auto">
            {notifications.length === 0 ? (
              <div className="px-4 py-6 text-center text-gray-500 dark:text-gray-400">
                No notifications
              </div>
            ) : (
              <ul>
                {notifications.slice(0, 5).map((notification) => (
                  <li
                    key={notification.notification_id || Math.random().toString()}
                    className={`px-4 py-3 hover:bg-gray-50 dark:hover:bg-gray-700 border-b border-gray-100 dark:border-gray-700 ${
                      !notification.read ? "bg-blue-50 dark:bg-blue-900/20" : ""
                    }`}
                  >
                    <div 
                      className="cursor-pointer" 
                      onClick={() => {
                        onMarkAsRead(notification.notification_id || "");
                        setIsOpen(false);
                      }}
                    >
                      <div className="flex justify-between">
                        <p className="text-sm font-medium text-gray-900 dark:text-gray-100 truncate">
                          {notification.content_preview}
                        </p>
                        <span className="text-xs text-gray-500 dark:text-gray-400">
                          {formatRelativeTime(notification.timestamp)}
                        </span>
                      </div>
                      <p className="text-xs text-gray-500 dark:text-gray-400 mt-1 truncate">
                        From {notification.sender_id.substring(0, 8)}...
                      </p>
                    </div>
                  </li>
                ))}
                
                {notifications.length > 5 && (
                  <li className="p-2 text-center">
                    <button 
                      onClick={onViewAll} 
                      className="text-xs text-blue-600 dark:text-blue-400 hover:underline"
                    >
                      View {notifications.length - 5} more
                    </button>
                  </li>
                )}
              </ul>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default NotificationBell;